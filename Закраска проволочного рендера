#include <iostream>
#include "tgaimage.h"
#include "tgaimage.cpp"
#include <iterator>
#include <vector>
#include <algorithm>
#include <list>
 
using namespace std;
struct rib
{
    rib(float x1, float y1, float x2, float y2);
    float x, y, dx, z;
    bool operator == (const rib& b) const;
    bool operator > (const rib & b) const;
    bool operator < (const rib& b) const;
};
 
bool rib::operator == (const rib& b) const
{
    return this->y == b.y;
}
 
bool rib::operator > (const rib& b) const
{
    return this->y > b.y;
}
 
bool rib::operator < (const rib& b) const
{
    return this->y < b.y;
}
 
bool compare_x(const rib& first, const rib& second)
{
    return first.x < second.x;
}
 
rib::rib(float x1, float y1, float x2, float y2)
{
    if (y1 < y2)
    {
        swap(y1, y2);
        swap(x1, x2);
    }
 
    this->y = ceil(y2);
    this->z = (y1);
    this->dx = (x1 - x2) / (y1 - y2);
    this->x = x2 + dx * (y - y2);
}
 
void line(int x0, int y0, int x1, int y1, TGAImage& image, TGAColor color)
{
    bool steep = 0;
    float dy=abs(y1-y0),dx = abs(x1-x0);
    float t;
    int y;
    if (dx < dy)
    {
        swap(x0, y0);
        swap(x1, y1);
        steep = 1;
    }
 
    if (x0 > x1)
    {
        swap(x0, x1);
        swap(y0, y1);
    }
 
    for (int x = x0; x <= x1; x++)
    {
        t = (x - x0) / (float)(x1 - x0);
        y = (y1-y0)*t + y0;
        if (steep)
            image.set(y, x, color);
        else
            image.set(x, y, color);
    }
}
 
int main(){
 
    setlocale(LC_ALL, "rus");
 
    const int width = 1000, height = 1000;
 
    int i,j, x0, y0, x1, y1, x2, y2;
 
    float y;
 
    vector <rib> CAP;
    list <rib> y_list;
    list<rib>::iterator iter;
 
    vector <int> X;
    vector <int> Y;
 
    TGAColor Shade;
 
    ifstream inputfile;
    inputfile.open("obj/african_head.obj", ios_base::binary);
    if (inputfile.fail()) {cout<<"The file isn't opened"; return 1;}
 
    string l;
    double v;
    int number_of_vertex;
 
    vector <vector <int> > faces;
    vector <vector <double> > vertexes;
 
    vector <int> fa(3);
    vector <double> ve(3);
 
    while (!inputfile.eof())
    {
        inputfile >> l;
        if (l == "v")
        {
            ve.clear();
            for (i = 0; i < 3; i++)
            {
                inputfile >> v;
                ve.push_back(v);
            }
            vertexes.push_back(ve);
        }
        if (l == "f")
        {
            fa.clear();
            for (j = 0; j < 3; j++)
            {
                inputfile >> l;
                number_of_vertex = stoi(l);
                fa.push_back(number_of_vertex);
            }
            faces.push_back(fa);
        }
    }
 
    if (faces.empty() || vertexes.empty()) cout << "Один из векторов пуст";
 
    TGAImage image(width, height, TGAImage::RGB);
    for (i = 0; i < faces.size(); ++i)
    {
        Shade = TGAColor(rand() % 255, rand() % 255, rand() % 255, rand() % 255);
 
            x0 = (vertexes[faces[i][0] - 1][0] + 1.) * width / 2.;
            y0 = (vertexes[faces[i][0] - 1][1] + 1.) * height / 2.;
            x1 = (vertexes[faces[i][1] - 1][0] + 1.) * width / 2.;
            y1 = (vertexes[faces[i][1] - 1][1] + 1.) * height / 2.;
            x2 = (vertexes[faces[i][2] - 1][0] + 1.) * width / 2.;
            y2 = (vertexes[faces[i][2] - 1][1] + 1.) * height / 2.;
 
            y_list.clear();
 
            y_list.push_back(rib(x0, y0, x1, y1));
            y_list.push_back(rib(x1,y1,x2,y2));
            y_list.push_back(rib(x0, y0, x2, y2));
 
            line(x0, y0, x1, y1, image, Shade);
            line(x1, y1, x2, y2, image, Shade);
            line(x2, y2, x0, y0, image, Shade);
 
            y_list.sort();
 
            auto iter_start = y_list.begin();
            auto iter_end = y_list.end();
 
            y = y_list.begin()->y;
 
            do
                {
                for (iter = iter_start; iter != iter_end; iter++)
                {
                    if (iter->y == y && iter->z != iter->y)
                        CAP.push_back(*iter);
                }
 
                for (j = 0; 2 * j + 1 < CAP.size(); j++)
                    line(CAP[2 * j].x, y, CAP[2 * j + 1].x, y, image, Shade);
 
                y++;
                sort(CAP.begin(), CAP.end(), compare_x);
 
                j = 0;
                while (j < CAP.size())
                {
                    if (y >= CAP[j].z)
                        CAP.erase(CAP.begin() + j);
 
                    else
                    {
                        CAP[j].x += CAP[j].dx;
                        if (j != 0 && CAP[j-1].x > CAP[j].x)
                            swap(CAP[j-1], CAP[j]);
                        j++;
                    }
                }
            }
            while (!CAP.empty());
    }
    image.flip_vertically();
    image.write_tga_file("ShadedObjFile.tga");
    return 0;
}
